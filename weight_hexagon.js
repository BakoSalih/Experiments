export function weight_hexagon(e,t,o,r,n){const f=t*o,l=t*r,s=t*n,i=2*(f+l+s-1);for(var h=[],a=0;a<i;a++)h[a]=[],h[a].length=i,h[a].fill(0);const c=e.length,u=e[0].length;for(var g=0;g<i;g++)for(var v=0;v<i;v++)if(m(g,v))if(g%2==0){const t=g/2;h[i-1-v][g]=e[c-1-v%c][t%u]}else v%2==0&&(h[i-1-v][g]=1);else x=v,g>=2*(l+s)-1&&x>=2*(f+s)-1&&p(g,v)?h[i-1-v][g]=1:p(g,v)&&(v+g)%2==1&&(h[i-1-v][g]=1);var x;return h;function p(e,t){var o=!1;const r=i-1-t;return 0==e&&0==t?o=!0:0==e&&t>0?o=0==h[r+1][e]:e>0&&0==t?o=(e+t)%2==1?0==h[r][e-1]:0==h[r][e-1]&&0==h[r-1][e-1]:e>0&&t==i-1?o=(e+t)%2==1?0==h[r][e-1]&&0==h[r+1][e-1]&&0==h[r+1][e]:0==h[r][e-1]&&0==h[r+1][e]:e>0&&t>0&&t<i-1&&(o=(e+t)%2==1?0==h[r][e-1]&&0==h[r+1][e-1]&&0==h[r+1][e]:0==h[r][e-1]&&0==h[r-1][e-1]&&0==h[r+1][e]),o}function m(e,t){var o=!1;return e<2*Math.min(l,s)?o=t>=0&&t<2*f+e:e>=2*s&&e<2*l?o=t>=0&&t<2*(f+s)-1:e>=2*l&&e<2*s?o=t>=e-2*l+1&&t<2*f+e:e>=2*Math.max(l,s)&&e<2*(l+s)-1&&(o=t>=e-2*l+1&&t<2*(f+s)-1),o}}export function gap(e,t,o,r,n,f=0,l=0,s=1){const i=e.length;if(n>0){const h=o+r-1+2*f,a=i-(t+r)-2*l-f;if(1==s)for(let t=-n;t<=n;t++)for(let o=-2*n;o<=2*n;o++)o>=-n+t&&o<=n+t&&(e[a-t][h+o]=0,e.holes[a-t][h+o]=1);else if(2==s)for(let t=-n;t<=n;t++)for(let o=-n;o<=n;o++)e[a-t][h+o]=0,e.holes[a-t][h+o]=1;else if(3==s)for(let t=-n;t<=n;t++)for(let o=-2*n;o<=2*n;o++)o>=-n+t&&o<=n+t&&(e[a-o][h+t]=0,e.holes[a-o][h+t]=1);else if(4==s)for(let t=-1;t<=1;t++){for(let o=-1;o<=1;o++)e[a-o][h+t]=0,e.holes[a-o][h+t]=1;e[a][h]=1}}return e}